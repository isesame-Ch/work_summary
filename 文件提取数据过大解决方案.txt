业务场景：从一个.txt文件中读取所有数据，存到redis或数据库中，数据格式是一行一个手机号，再一个一个的取出来发短信
如：
132******92
132******92
132******92
132******92
...
...

思路1：一开始想着，通过file_get_contents获取.txt里的内容，再通过explode分解换行符PHP_EOL来获得每一行的手机号，最后通过redis的sadd方法存入redis，通过redis的spop方法（类似于数组pull方法，取出来用并删掉原记录）取出记录调用短信接口。

代码如下：
//获取文件内容
$mobile_list = file_get_contents('mobile.txt');

//通过换行符拆分
$mobiles = explode(PHP_EOL,$mobile_list);

//存入redis数据库
foreach ($mobiles as mobile) {
	if (is_numeric($mobile)) {
		$predis->sadd('mobile',$mobile);
	}
}
......

问题：但是这个思路在执行的时候遇到了问题，$mobile_list取到的字符串有130多万行，拆分时超出了大小限制，无法拆分，$mobiles最终还是存的一整个字符串，存入reids时直接整个字符串一起存了，无法用spop单独一条一条的取出

解决方案：由于是因为读取的字符串太长造成的，那就要处理获取的内容，具体有两个思路，
1.把读取的文件拆成几个（事实上我拆成了一个90W条，一个40W条的两个文件），分开读，最后把拆分后数据存入redis的同一个键名
2.一行一行的读取文件数据，每读一行就存入redis的同一键名

工作时由于时间紧迫，我直接采用了第一种方法，手动将文件拆分成两个文件来读，回来后翻阅资料，发现fgets()函数能满足第二个解决方案的需求，我又尝试了第二种解决方案，同样解决了问题

注：fgets()方法是返回一行数据，继续执行fgets()函数指针会指向下一行，将返回下一行数据。

具体方法：
通过循环，在循环中使用fgets()函数取得数据，存入redis

代码如下：
$file = fopen('mobile0.txt','r');
for ($i=0;$i<1153739;$i++)			//1153739是文件的总行数
{
    $tmp = fgets($file);
    $tmp = trim($tmp);
    if (is_numeric($tmp))
    {
        $predis->sadd('mobile',$tmp);
    }
}
......